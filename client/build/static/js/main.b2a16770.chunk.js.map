{"version":3,"sources":["reducers/helper/fetch.js","reducers/todoReducer.js","reducers/authReducer.js","components/todo.js","components/auth.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetch2","api","body","type","a","fetch","method","headers","localStorage","getItem","JSON","stringify","res","json","fetch3","ADD_TODO","createAsyncThunk","result","GET_TODO","DELETE_TODO","id","UPDATE_TODO","console","log","todoReducer","createSlice","name","initialState","reducers","extraReducers","fulfilled","state","action","payload","message","push","pending","filter","item","_id","token","loading","error","signupUser","signinUser","authReducer","addToken","Logout","removeItem","setItem","actions","Todo","useState","myTodo","setTodo","todoHandle","settodoHandle","key","setKey","dispatch","useDispatch","useSelector","todo","useEffect","placeholder","value","onChange","e","target","className","onClick","addTodo","UpdateTodo","map","href","Auth","user","email","setEmail","password","setPassword","auth","setAuth","style","color","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2a16770.chunk.js","sourcesContent":["export const fetch2 = async (api, body, type) => {\n    const res = await fetch(api,\n    {\n        method: type,\n        headers:{\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": localStorage.getItem('token')\n\n        },\n        body:JSON.stringify(body)\n    })\n    return  await res.json()\n}\n\nexport const fetch3 = async (api, type) => {\n    const res = await fetch(api,\n    {\n        method: type,\n        headers:{\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": localStorage.getItem('token')\n\n        },\n       \n    })\n    return  await res.json()\n}\n\n","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\nimport {fetch2, fetch3} from './helper/fetch'\n\nconst initialState =[]\n   \n\nexport const ADD_TODO = createAsyncThunk(\n    'addTodo',\n    async (body) =>{\n        const result = await fetch2('/createtodo', body, \"post\")\n        return result\n    }\n)\nexport const GET_TODO = createAsyncThunk(\n    'gettodo',\n    async () => {\n        const result = await fetch3('/gettodos',\"get\")\n        return result\n    } \n)\n\nexport const DELETE_TODO = createAsyncThunk(\n    'deletetodo',\n    async (id) => {\n        const result = await fetch3(`/remove/${id}`,\"delete\")\n        return result\n    } \n)\n\nexport const UPDATE_TODO = createAsyncThunk(\n    'updatetodo',\n    async (body) => {\n        console.log(body)\n        const result = await fetch2(`/update/${body.id}`, body,\"put\")\n        return result\n    } \n)\n\nexport const todoReducer = createSlice({\n    name:\"todo\",\n    initialState,\n    reducers:{\n    },\n    extraReducers:{\n        [ADD_TODO.fulfilled]:(state, action) => {\n            if(action.payload.message){\n                state.push(action.payload.message)\n            }\n        },\n        [ADD_TODO.pending]:(state, action) => {\n           \n        },\n        [GET_TODO.fulfilled]:(state, {payload:{message}}) => {\n            console.log(message)\n            return message\n        },\n        \n        [DELETE_TODO.fulfilled]:(state, {payload:{message}}) => {\n            if(message){\n                const removeTodo = state.filter((item) => {\n                   return item._id !== message._id\n                })\n                 return removeTodo\n            }\n        },\n        [UPDATE_TODO.fulfilled]:(state, {payload:{message}}) => {\n            return message\n        },\n    }\n})\n\n\nexport default todoReducer.reducer","import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\nimport {fetch2} from './helper/fetch'\nexport const initialState = {\n    token:\"\",\n    loading: false,\n    error:\"\"\n}\n\nexport const signupUser = createAsyncThunk(\n    'signupuser',\n    async(body, state)=>{\n        state= initialState\n      const result = await fetch2('/signup', body,\"post\")\n      return result\n    }\n)\n\nexport const signinUser = createAsyncThunk(\n    'signinuser',\n    async(body)=>{\n      const result = await fetch2('/signin', body,\"post\")\n      return result\n    }\n)\n\nexport const authReducer = createSlice({\n    name:\"user\",\n    initialState,\n    reducers:{\n        addToken:(state, action) => {\n            state.token = localStorage.getItem('token')\n        },\n        Logout:(state, action) => {\n            state.token = null\n            localStorage.removeItem('token')\n        }\n    },\n    extraReducers:{\n        [signupUser.fulfilled]:(state, action) => {\n            state.loading = false\n            if(action.payload.error){\n                state.error = action.payload.error\n            }\n            else{\n                state.error = action.payload.message\n            }\n        },\n        [signupUser.pending]:(state, action) => {\n            state.loading = true\n        },\n        [signinUser.fulfilled]:(state, action) => {\n            state.loading = false\n            if(action.payload.error){\n                state.error = action.payload.error\n            }\n            else{\n                state.token = action.payload.token\n                localStorage.setItem('token', state.token)\n            }\n        },\n        [signinUser.pending]:(state, action) => {\n            state.loading = true\n        },\n    }\n})\nexport const {addToken, Logout} = authReducer.actions \nexport default authReducer.reducer","import React, {useState, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {ADD_TODO, GET_TODO, DELETE_TODO, UPDATE_TODO} from '../reducers/todoReducer'\nimport {Logout} from '../reducers/authReducer'\n\nfunction Todo() {\n    const [myTodo, setTodo]  = useState(\"\")\n    const [todoHandle, settodoHandle] = useState(\"ADD TODO\")\n    const [key, setKey] = useState(\"\")\n    const dispatch = useDispatch()\n    const Todo = useSelector(state=>state.todo)\n    const addTodo = (myTodo) => {\n        dispatch(ADD_TODO({todo:myTodo}))\n    }\n\n    const deleteTodo = (id) => {\n        dispatch(DELETE_TODO(id))\n    }\n\n    const UpdateTodo = (key,myTodo) => {\n        dispatch(UPDATE_TODO({id: key,todo:myTodo}))\n    }\n\n  useEffect((state)=>{\n    dispatch(GET_TODO())\n \n  },[dispatch])\n    return (\n        <div>\n            \n             <input\n            type=\"text\"\n            placeholder=\"Enter todo here\"\n            value={myTodo}\n            onChange={(e) => setTodo(e.target.value)}\n            />\n            \n            <button \n            className=\"btn\"\n            \n                \n                onClick={() =>{\n                    todoHandle === \"ADD TODO\"?\n                    addTodo(myTodo):\n                    UpdateTodo(key,myTodo)\n                } \n                }\n                \n                \n            \n            >\n            {todoHandle}\n            </button>\n            \n\n           \n            <ul className=\"collection with-header\">\n                <li className=\"collection-header\"><h4>Todo List</h4></li>\n\n                \n                {\n                    Todo.map((item) => {\n                        return (\n                            <li className=\"collection-item\" key={item._id}><div>{item.todo}\n                        <a href=\"#!\" className=\"secondary-content\">\n                        <i className=\"material-icons\" onClick={() => {\n                            settodoHandle(\"UPDATE TODO\")\n                            setKey(item._id)\n                        }} >edit</i> \n                        <i className=\"material-icons\" onClick={() => {deleteTodo(item._id)}}>delete</i>\n                        </a></div></li>\n                        )\n                    })\n                }     \n            </ul>\n                \n            \n\n            <button \n            className=\"btn\"\n            onClick={() =>{dispatch(Logout())}} >\n            Logout\n            </button>\n                \n            \n            \n        </div>\n    )\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport {signinUser, signupUser} from '../reducers/authReducer'\nimport {useDispatch, useSelector} from 'react-redux'\nfunction Auth() {\n    const dispatch = useDispatch()\n    const {loading, error} = useSelector(state => state.user)\n    const [email, setEmail] = useState()\n    const [password, setPassword] = useState()\n    const [auth, setAuth] = useState('Sign in')\n    const authenticate = () =>{\n        if(auth === 'Sign in'){\n            dispatch(signinUser({email, password}))\n        }\n        else{\n            dispatch(signupUser({email,password}))\n        }\n    }\n    \n    return (\n        <div>\n            {\n                loading &&\n                <div className=\"progress\">\n                    <div className=\"indeterminate\"></div>\n                </div>\n            }\n            <h1>Please {auth}</h1>\n            <input\n            type=\"email\"\n            placeholder=\"Enter Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            />\n\n            <input\n            type=\"password\"\n            placeholder=\"Enter Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            />\n\n            {\n                error &&\n                <h6 style={{color: \"red\"}}>{error}</h6>\n            }\n\n            {\n                auth === \"Sign in\"?\n                <h6 onClick={() =>{setAuth(\"Sign up\")}}> Don't have an account?</h6>:\n                <h6 onClick={() =>{setAuth(\"Sign in\")}}> Already have an account?</h6>\n            }\n\n            <button \n            className=\"btn\"\n            onClick={() => authenticate()}>\n                {auth}\n            </button>\n        </div>\n    )\n}\n\nexport default Auth","import React,{useEffect} from 'react';\nimport './App.css';\nimport {useSelector,useDispatch} from 'react-redux'\nimport Todo from './components/todo'\nimport Auth from './components/auth'\nimport {addToken} from './reducers/authReducer'\n\n\nfunction App() {\n  const {token}= useSelector(state => state.user)\n\n  const dispatch = useDispatch()\n  \n  useEffect(()=>{\n    dispatch(addToken())\n  },[dispatch])\n  return (\n    <div className=\"App\">\n    {\n      token ===null ?\n      <Auth /> :\n      <Todo />\n    }\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from '../reducers/authReducer'\nimport todoReducer from '../reducers/todoReducer';\n\nexport const store = configureStore({\n  reducer: {\n    user:authReducer,\n    todo:todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}